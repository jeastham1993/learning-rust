AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rust-sam-app

  Sample SAM Template for rust-sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Handler: bootstrap.is.the.handler
    Runtime: provided.al2
    Architectures:
      - x86_64

Parameters:
  LoginPassword: 
    Description: The password to use for the API
    Type: String

Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

  ApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/lambda/axum_lambda/
      Handler: bootstrap.is.the.handler
      Events:
        RustApi:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{proxy+}
            Method: ANY
            ApiId: !Ref RustSsrHttpApi
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy: # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
            TableName: !Ref Table

  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/lambda/axum_lambda/
      Handler: bootstrap.is.the.handler
      Events:
        RustApi:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /login
            Method: ANY
            ApiId: !Ref RustSsrHttpApi
            Auth:
               Authorizer: NONE
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          LOGIN_FUNCTION: "Y"
          PASSWORD: !Ref LoginPassword
      Policies:
        - DynamoDBCrudPolicy: # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
            TableName: !Ref Table

  ApiGatewayLoginInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LoginFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  AuthorizerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/lambda/authorizer/
      Handler: bootstrap.is.the.handler
      Environment:
        Variables:
          PASSWORD: !Ref LoginPassword
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBReadPolicy: # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
            TableName: !Ref Table

  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
  
  RustSsrHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers: 
          LambdaAuthorizer:
            EnableSimpleResponses: true
            AuthorizerPayloadFormatVersion: 2.0
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Cookie
        DefaultAuthorizer: LambdaAuthorizer